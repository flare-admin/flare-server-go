; # 项目技术栈规范
; [项目底子]
; 框架 = Go + Hertz
; 数据库 = PostgreSQL + GORM
; 缓存 = Redis
; API = RESTful

; # 代码规范
; [代码规矩]
; 项目结构 = 模块化 + DDD + CQRS
; 错误处理 = 统一错误处理中间件
; 日志 = 结构化日志

; # AI 开发规则
; [AI规则]
; 代码必须包含注释
; 接口必须有文档
; 错误处理必须完整
; 性能优化必须考虑

; # 目录结构规范
; [目录结构]
; ├── application/      # 应用服务层（用例、CQRS命令/查询处理器）
; ├── domain/           # 领域层（实体、聚合、值对象、领域服务、仓储接口）
; ├── infrastructure/   # 基础设施层（数据库、缓存、第三方服务实现）
; ├── interfaces/       # 接口层（API、RPC、Web、DTO、参数校验、路由等）
; ├── wire.go           # 依赖注入
; └── README.md         # 文档

; # 模块化规范
; [模块化规范]
; 1. 每个模块独立封装
; 2. 模块间通过接口通信
; 3. 模块内部实现 DDD
; 4. 模块内部实现 CQRS
; 5. 模块间依赖通过依赖注入

; # 领域驱动设计规范
; [DDD规范]
; 1. 使用领域模型
; 2. 实现仓储模式
; 3. 使用值对象
; 4. 实现领域事件
; 5. 使用领域服务

; # CQRS规范
; [CQRS规范]
; 1. 命令和查询分离
; 2. 使用命令处理器
; 3. 使用查询处理器
; 4. 实现事件溯源
; 5. 使用事件总线

; # 数据库规范
; [数据库规范]
; 1. 使用 GORM 进行数据库操作
; 2. 实现数据库迁移
; 3. 使用事务管理
; 4. 实现软删除
; 5. 使用数据库索引

; # API规范
; [API规范]
; 1. 使用 Hertz 框架
; 2. 实现中间件
; 3. 使用参数验证
; 4. 实现 API 文档
; 5. 使用统一响应格式

; # 缓存规范
; [缓存规范]
; 1. 使用 Redis 缓存
; 2. 实现缓存策略
; 3. 处理缓存失效
; 4. 使用分布式锁
; 5. 实现缓存预热

; # 错误处理规范
; [错误处理]
; 1. 实现统一错误处理
; 2. 使用错误码
; 3. 记录错误日志
; 4. 实现优雅降级
; 5. 处理超时错误