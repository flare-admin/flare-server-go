// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/flare-admin/flare-server-go/apps/admin/server"
	service8 "github.com/flare-admin/flare-server-go/apps/admin/service"
	"github.com/flare-admin/flare-server-go/framework/infrastructure/configs"
	"github.com/flare-admin/flare-server-go/framework/infrastructure/database"
	"github.com/flare-admin/flare-server-go/framework/infrastructure/database/cache"
	events2 "github.com/flare-admin/flare-server-go/framework/infrastructure/events"
	"github.com/flare-admin/flare-server-go/framework/infrastructure/idempotence"
	"github.com/flare-admin/flare-server-go/framework/infrastructure/mq"
	database2 "github.com/flare-admin/flare-server-go/framework/pkg/database"
	"github.com/flare-admin/flare-server-go/framework/pkg/database/snowflake_id"
	"github.com/flare-admin/flare-server-go/framework/pkg/events"
	"github.com/flare-admin/flare-server-go/framework/pkg/lua_engine"
	manager2 "github.com/flare-admin/flare-server-go/framework/pkg/mqevent/manager"
	"github.com/flare-admin/flare-server-go/framework/support"
	"github.com/flare-admin/flare-server-go/framework/support/base"
	handlers2 "github.com/flare-admin/flare-server-go/framework/support/base/application/handlers"
	service2 "github.com/flare-admin/flare-server-go/framework/support/base/domain/service"
	"github.com/flare-admin/flare-server-go/framework/support/base/infrastructure/base/casbin"
	"github.com/flare-admin/flare-server-go/framework/support/base/infrastructure/base/oplog"
	"github.com/flare-admin/flare-server-go/framework/support/base/infrastructure/converter"
	handlers4 "github.com/flare-admin/flare-server-go/framework/support/base/infrastructure/handlers"
	"github.com/flare-admin/flare-server-go/framework/support/base/infrastructure/persistence/data"
	"github.com/flare-admin/flare-server-go/framework/support/base/infrastructure/persistence/repository"
	cache2 "github.com/flare-admin/flare-server-go/framework/support/base/infrastructure/query/cache"
	handlers3 "github.com/flare-admin/flare-server-go/framework/support/base/infrastructure/query/cache/handlers"
	"github.com/flare-admin/flare-server-go/framework/support/base/infrastructure/query/impl"
	rest2 "github.com/flare-admin/flare-server-go/framework/support/base/interfaces/rest"
	service5 "github.com/flare-admin/flare-server-go/framework/support/cache/application/service"
	service4 "github.com/flare-admin/flare-server-go/framework/support/cache/domain/service"
	service3 "github.com/flare-admin/flare-server-go/framework/support/cache/infrastructure/service"
	rest4 "github.com/flare-admin/flare-server-go/framework/support/cache/interfaces/rest"
	handlers5 "github.com/flare-admin/flare-server-go/framework/support/config_center/application/handlers"
	repository2 "github.com/flare-admin/flare-server-go/framework/support/config_center/infrastructure/repository"
	rest3 "github.com/flare-admin/flare-server-go/framework/support/config_center/interfaces/rest"
	biz3 "github.com/flare-admin/flare-server-go/framework/support/dictionary/biz"
	data6 "github.com/flare-admin/flare-server-go/framework/support/dictionary/data"
	"github.com/flare-admin/flare-server-go/framework/support/dictionary/interfaces"
	"github.com/flare-admin/flare-server-go/framework/support/dictionary/translator"
	"github.com/flare-admin/flare-server-go/framework/support/monitoring/application/handlers"
	"github.com/flare-admin/flare-server-go/framework/support/monitoring/domain/service"
	"github.com/flare-admin/flare-server-go/framework/support/monitoring/interfaces/rest"
	"github.com/flare-admin/flare-server-go/framework/support/rule_engine"
	handler4 "github.com/flare-admin/flare-server-go/framework/support/rule_engine/application/command/handler"
	handler3 "github.com/flare-admin/flare-server-go/framework/support/rule_engine/application/queries/handler"
	service7 "github.com/flare-admin/flare-server-go/framework/support/rule_engine/domain/service"
	data3 "github.com/flare-admin/flare-server-go/framework/support/rule_engine/infrastructure/persistence/data"
	repository4 "github.com/flare-admin/flare-server-go/framework/support/rule_engine/infrastructure/repository"
	admin2 "github.com/flare-admin/flare-server-go/framework/support/rule_engine/interfaces/admin"
	"github.com/flare-admin/flare-server-go/framework/support/storage/application"
	"github.com/flare-admin/flare-server-go/framework/support/storage/domain"
	"github.com/flare-admin/flare-server-go/framework/support/storage/infrastructure"
	data7 "github.com/flare-admin/flare-server-go/framework/support/storage/infrastructure/persistence/data"
	repository5 "github.com/flare-admin/flare-server-go/framework/support/storage/infrastructure/persistence/repository"
	base2 "github.com/flare-admin/flare-server-go/framework/support/sysevent/base"
	biz2 "github.com/flare-admin/flare-server-go/framework/support/sysevent/biz"
	data5 "github.com/flare-admin/flare-server-go/framework/support/sysevent/data"
	"github.com/flare-admin/flare-server-go/framework/support/sysevent/interfaces"
	"github.com/flare-admin/flare-server-go/framework/support/systask/biz"
	data4 "github.com/flare-admin/flare-server-go/framework/support/systask/data"
	"github.com/flare-admin/flare-server-go/framework/support/systask/interfaces"
	"github.com/flare-admin/flare-server-go/framework/support/systask/manager"
	"github.com/flare-admin/flare-server-go/framework/support/template"
	handler2 "github.com/flare-admin/flare-server-go/framework/support/template/application/command/handler"
	"github.com/flare-admin/flare-server-go/framework/support/template/application/queries/handler"
	service6 "github.com/flare-admin/flare-server-go/framework/support/template/domain/service"
	data2 "github.com/flare-admin/flare-server-go/framework/support/template/infrastructure/persistence/data"
	repository3 "github.com/flare-admin/flare-server-go/framework/support/template/infrastructure/repository"
	"github.com/flare-admin/flare-server-go/framework/support/template/interfaces/admin"
)

import (
	_ "github.com/flare-admin/flare-server-go/apps/admin/docs"
	_ "github.com/flare-admin/flare-server-go/framework/support/rule_engine/interfaces/admin"
)

// Injectors from wire.go:

// wireApp init application.
func wireApp(bootstrap *configs.Bootstrap, configsData *configs.Data) (*app, func(), error) {
	redisClient, cleanup, err := database.NewHdbClient(configsData)
	if err != nil {
		return nil, nil, err
	}
	iToken := server.NewRdbToken(bootstrap, redisClient)
	iIdGenerate := snowflake_id.NewSnowIdGen()
	db, cleanup2, err := database2.NewDb(configsData)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	databaseData, err := database2.NewData(iIdGenerate, db, configsData)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	iDataBase := database.NewDataBase(databaseData)
	iOperationLogRepo := repository.NewOperationLogRepository(iDataBase)
	iDbOperationLogWrite := oplog.NewDbOperationLogWriter(iOperationLogRepo)
	metricsService := service.NewMetricsService()
	metricsQueryHandler := handlers.NewMetricsQueryHandler(metricsService)
	metricsController := rest.NewMetricsController(metricsQueryHandler)
	iSysRoleRepo := data.NewSysRoleRepo(iDataBase)
	iPermissionsRepo := data.NewSysMenuRepo(iDataBase)
	iRoleRepository := repository.NewRoleRepository(iSysRoleRepo, iPermissionsRepo)
	iEventBus := events.NewEventBus()
	roleCommandService := service2.NewRoleCommandService(iRoleRepository, iEventBus)
	roleCommandHandler := handlers2.NewRoleCommandHandler(roleCommandService)
	roleConverter := converter.NewRoleConverter()
	userConverter := converter.NewUserConverter()
	permissionsConverter := converter.NewPermissionsConverter()
	roleQueryService := impl.NewRoleQueryService(iSysRoleRepo, roleConverter, userConverter, permissionsConverter)
	client := database.NewRc(redisClient)
	cacheCache := cache.NewCache(redisClient, client)
	cacheDecorator := cache.NewCacheDecorator(cacheCache)
	roleQueryCache := cache2.NewRoleQueryCache(roleQueryService, cacheDecorator)
	roleQueryHandler := handlers2.NewRoleQueryHandler(roleQueryCache, roleConverter)
	iSysTenantRepo := data.NewSysTenantRepo(iDataBase)
	iPermissionsRepository := casbin.NewRepositoryImpl(iSysRoleRepo, iPermissionsRepo, iSysTenantRepo)
	enforcer, err := server.NewCasBinEnforcer(redisClient, iPermissionsRepository)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	sysRoleController := rest2.NewSysRoleController(roleCommandHandler, roleQueryHandler, enforcer)
	iSysUserRepo := data.NewSysUserRepo(iDataBase)
	iUserRepository := repository.NewUserRepository(iSysUserRepo, iSysRoleRepo)
	userCommandService := service2.NewUserCommandService(iUserRepository, iEventBus)
	userCommandHandler := handlers2.NewUserCommandHandler(userCommandService)
	iSysDepartmentRepo := data.NewSysDepartmentRepo(iDataBase)
	departmentConverter := converter.NewDepartmentConverter()
	userQueryService := impl.NewUserQueryService(iSysUserRepo, iSysRoleRepo, iPermissionsRepo, userConverter, roleConverter, permissionsConverter, iSysDepartmentRepo, departmentConverter, iSysTenantRepo, bootstrap)
	userQueryCache := cache2.NewUserQueryCache(userQueryService, cacheDecorator)
	userQueryHandler := handlers2.NewUserQueryHandler(userQueryCache)
	sysUserController := rest2.NewSysUserController(userCommandHandler, userQueryHandler, enforcer)
	iTenantRepository := repository.NewTenantRepository(iSysTenantRepo, iSysUserRepo)
	tenantCommandService := service2.NewTenantCommandService(iTenantRepository, iEventBus)
	tenantCommandHandler := handlers2.NewTenantCommandHandler(tenantCommandService)
	tenantConverter := converter.NewTenantConverter(userConverter)
	tenantQueryService := impl.NewTenantQueryService(iSysTenantRepo, iSysUserRepo, iPermissionsRepo, tenantConverter, permissionsConverter)
	tenantQueryCache := cache2.NewTenantQueryCache(tenantQueryService, cacheDecorator)
	tenantQueryHandler := handlers2.NewTenantQueryHandler(tenantQueryCache)
	sysTenantController := rest2.NewSysTenantController(tenantCommandHandler, tenantQueryHandler, enforcer)
	repositoryIPermissionsRepository := repository.NewPermissionsRepository(iPermissionsRepo)
	permissionService := service2.NewPermissionService(repositoryIPermissionsRepository, iEventBus)
	permissionsCommandHandler := handlers2.NewPermissionsCommandHandler(permissionService, enforcer)
	permissionsQueryService := impl.NewPermissionsQueryService(iPermissionsRepo, iSysTenantRepo, permissionsConverter)
	permissionsQueryCache := cache2.NewPermissionsQueryCache(permissionsQueryService, cacheDecorator)
	permissionsQueryHandler := handlers2.NewPermissionsQueryHandler(permissionsQueryCache)
	sysPermissionsController := rest2.NewSysPermissionsController(permissionsCommandHandler, permissionsQueryHandler, enforcer)
	iAuthRepository := repository.NewAuthRepository(iUserRepository, redisClient)
	iLoginLogRepo := data.NewLoginLogRepo(iDataBase)
	iLoginLogRepository := repository.NewLoginLogRepository(iLoginLogRepo)
	authHandler := handlers2.NewAuthHandler(bootstrap, iAuthRepository, userQueryCache, iLoginLogRepository)
	authController := rest2.NewAuthController(authHandler)
	loginLogQueryService := impl.NewLoginLogQueryService(iLoginLogRepo)
	loginLogQueryHandler := handlers2.NewLoginLogQueryHandler(loginLogQueryService)
	loginLogController := rest2.NewLoginLogController(loginLogQueryHandler, enforcer)
	operationLogQueryService := impl.NewOperationLogQueryService(iOperationLogRepo)
	operationLogQueryHandler := handlers2.NewOperationLogQueryHandler(operationLogQueryService)
	operationLogController := rest2.NewOperationLogController(operationLogQueryHandler, enforcer)
	iDepartmentRepository := repository.NewDepartmentRepository(iSysDepartmentRepo)
	departmentService := service2.NewDepartmentService(iDepartmentRepository, iUserRepository, iEventBus)
	departmentCommandHandler := handlers2.NewDepartmentCommandHandler(departmentService)
	departmentQueryService := impl.NewDepartmentQueryService(iSysDepartmentRepo, iSysUserRepo, departmentConverter, userConverter)
	departmentQueryCache := cache2.NewDepartmentQueryCache(departmentQueryService, cacheDecorator)
	departmentQueryHandler := handlers2.NewDepartmentQueryHandler(departmentQueryCache)
	departmentController := rest2.NewDepartmentController(departmentCommandHandler, departmentQueryHandler, enforcer)
	iDataPermissionRepo := data.NewDataPermissionRepo(iDataBase)
	iDataPermissionRepository := repository.NewDataPermissionRepository(iDataPermissionRepo)
	dataPermissionService := service2.NewDataPermissionService(iDataPermissionRepository, iRoleRepository, iEventBus)
	dataPermissionCommandHandler := handlers2.NewDataPermissionCommandHandler(dataPermissionService)
	dataPermissionConverter := converter.NewDataPermissionConverter()
	dataPermissionQueryService := impl.NewDataPermissionQueryService(iDataPermissionRepo, dataPermissionConverter)
	dataPermissionQueryCache := cache2.NewDataPermissionQueryCache(dataPermissionQueryService, cacheDecorator)
	dataPermissionQueryHandler := handlers2.NewDataPermissionQueryHandler(dataPermissionQueryCache)
	dataPermissionController := rest2.NewDataPermissionController(dataPermissionCommandHandler, dataPermissionQueryHandler)
	cacheHandler := handlers3.NewCacheHandler(userQueryCache, roleQueryCache, departmentQueryCache, permissionsQueryCache, dataPermissionQueryCache, tenantQueryCache, enforcer)
	userEventHandler := handlers4.NewUserEventHandler(cacheHandler)
	roleEventHandler := handlers4.NewRoleEventHandler(cacheHandler)
	departmentEventHandler := handlers4.NewDepartmentEventHandler(cacheHandler)
	permissionEventHandler := handlers4.NewPermissionEventHandler(cacheHandler)
	dataPermissionEventHandler := handlers4.NewDataPermissionEventHandler(cacheHandler)
	tenantEventHandler := handlers4.NewTenantEventHandler(cacheHandler)
	handlerEvent := handlers4.NewHandlerEvent(iEventBus, userEventHandler, roleEventHandler, departmentEventHandler, permissionEventHandler, dataPermissionEventHandler, tenantEventHandler)
	baseServer := base.NewBaseServer(sysRoleController, sysUserController, sysTenantController, sysPermissionsController, authController, loginLogController, operationLogController, departmentController, dataPermissionController, handlerEvent)
	iConfigRepository := repository2.NewConfigRepository(iDataBase)
	cacheRepository := service3.NewRedisCacheService(redisClient)
	internalCacheServiceImpl := service4.NewInternalCacheService(cacheRepository)
	configCommandHandler := handlers5.NewConfigCommandHandler(iConfigRepository, internalCacheServiceImpl)
	iConfigGroupRepository := repository2.NewConfigGroupRepository(iDataBase)
	configQueryHandler := handlers5.NewConfigQueryHandler(iConfigGroupRepository, iConfigRepository, internalCacheServiceImpl)
	configGroupCommandHandler := handlers5.NewConfigGroupCommandHandler(iConfigGroupRepository, internalCacheServiceImpl)
	configGroupQueryHandler := handlers5.NewConfigGroupQueryHandler(iConfigGroupRepository, internalCacheServiceImpl)
	configHandler := rest3.NewConfigHandler(configCommandHandler, configQueryHandler, configGroupCommandHandler, configGroupQueryHandler, enforcer)
	cacheService := service4.NewCacheService(cacheRepository)
	serviceCacheService := service5.NewCacheService(cacheService)
	restCacheHandler := rest4.NewCacheHandler(serviceCacheService)
	iCategoryRepository := data2.NewCategoryRepository(iDataBase)
	categoryQueryHandler := handler.NewCategoryQueryHandler(iCategoryRepository)
	categoryRepository := repository3.NewCategoryRepository(iCategoryRepository)
	categoryService := service6.NewCategoryService(categoryRepository)
	categoryCommandHandler := handler2.NewCategoryCommandHandler(categoryService)
	adminCategoryService := admin.NewCategoryService(categoryQueryHandler, categoryCommandHandler, enforcer)
	iTemplateRepository := data2.NewTemplateRepository(iDataBase)
	templateQueryHandler := handler.NewTemplateQueryHandler(iTemplateRepository, iCategoryRepository)
	templateRepository := repository3.NewTemplateRepository(iTemplateRepository)
	templateService := service6.NewTemplateService(templateRepository, categoryRepository)
	templateCommandHandler := handler2.NewTemplateCommandHandler(templateService)
	adminTemplateService := admin.NewTemplateService(templateQueryHandler, templateCommandHandler, enforcer)
	tempServer := template.NewTempServer(adminCategoryService, adminTemplateService)
	iRuleTemplateRepository := data3.NewRuleTemplateRepository(iDataBase)
	repositoryITemplateRepository := repository4.NewRuleTemplateRepository(iRuleTemplateRepository)
	handlerTemplateQueryHandler := handler3.NewTemplateQueryHandler(repositoryITemplateRepository)
	iRuleCategoryRepository := data3.NewRuleCategoryRepository(iDataBase)
	repositoryICategoryRepository := repository4.NewRuleCategoryRepository(iRuleCategoryRepository)
	iRuleRepository := data3.NewRuleRepository(iDataBase)
	repositoryIRuleRepository := repository4.NewRuleRepository(iRuleRepository)
	ruleTemplateService := service7.NewRuleTemplateService(repositoryITemplateRepository, repositoryICategoryRepository, repositoryIRuleRepository, iIdGenerate)
	handlerTemplateCommandHandler := handler4.NewTemplateCommandHandler(ruleTemplateService)
	templateService2 := admin2.NewTemplateService(handlerTemplateQueryHandler, handlerTemplateCommandHandler, enforcer)
	handlerCategoryQueryHandler := handler3.NewCategoryQueryHandler(repositoryICategoryRepository)
	ruleCategoryService := service7.NewRuleCategoryService(repositoryICategoryRepository, repositoryITemplateRepository, repositoryIRuleRepository, iIdGenerate)
	handlerCategoryCommandHandler := handler4.NewCategoryCommandHandler(ruleCategoryService)
	categoryService2 := admin2.NewCategoryService(handlerCategoryQueryHandler, handlerCategoryCommandHandler, enforcer)
	ruleQueryHandler := handler3.NewRuleQueryHandler(repositoryIRuleRepository)
	ruleExecutor := lua_engine.NewRuleExecutorWithDB(iDataBase)
	ruleService := service7.NewRuleService(repositoryIRuleRepository, repositoryITemplateRepository, repositoryICategoryRepository, ruleExecutor, iIdGenerate)
	ruleCommandHandler := handler4.NewRuleCommandHandler(ruleService)
	adminRuleService := admin2.NewRuleService(ruleQueryHandler, ruleCommandHandler, enforcer)
	ruleEngineServer := rule_engine.NewServer(templateService2, categoryService2, adminRuleService)
	iTaskRepo := data4.NewTaskRepo(iDataBase)
	iTaskManager := manager.NewTaskManager(iTaskRepo)
	iTaskService := biz.NewTaskBiz(iTaskRepo, iTaskManager, iIdGenerate)
	taskService := interfaces.NewTaskService(iTaskService, enforcer)
	iEventRepo := data5.NewEventRepo(iDataBase)
	iEventServerApi := biz2.NewEventUseCase(iEventRepo, iDataBase, client)
	iSubscribeRepo := data5.NewSubscribeRepo(iDataBase)
	iSubscribeParameterRepo := data5.NewSubscribeParameterRepo(iDataBase)
	iDeadLetterSubscribeRepo := data5.NewDeadLetterSubscribeRepo(iDataBase)
	iSubscribeSmServerApi := base2.NewSubscribeManagerUseCase(iSubscribeRepo, iSubscribeParameterRepo, iDeadLetterSubscribeRepo, client)
	mqServer, cleanup3, err := mq.NewMqServer(bootstrap)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	imqEventBus := events2.NewNatsEventBus(mqServer)
	idempotencyTool := idempotence.NewIdempotencyTool(iDataBase, redisClient)
	eventManager := manager2.NewEventBusManager(iSubscribeSmServerApi, imqEventBus, idempotencyTool)
	iSubscribeServerApi := biz2.NewSubscribeUseCase(iSubscribeRepo, iDataBase, iSubscribeParameterRepo, eventManager, iDeadLetterSubscribeRepo, client)
	iDeadLetterServiceApi := biz2.NewDeadLetterSubscribeUseCase(iDeadLetterSubscribeRepo, iSubscribeRepo, eventManager, iDataBase)
	eventService := sysevent_service.NewEventService(iEventServerApi, iSubscribeServerApi, iDeadLetterServiceApi, enforcer)
	iDictionaryRepo := data6.NewDictionaryRepo(iDataBase)
	client2 := database.NewRedisClient(redisClient)
	iTranslator := translator.NewTranslator(iDictionaryRepo, client2)
	iDictionaryService := biz3.NewDictionaryUseCase(iDictionaryRepo, iTranslator, iIdGenerate)
	dictionaryService := dictionaryinterfaces.NewDictionaryService(iDictionaryService, enforcer)
	supportServer := support.NewServer(metricsController, baseServer, configHandler, restCacheHandler, tempServer, ruleEngineServer, taskService, eventService, dictionaryService)
	sysCronService, cleanup4, err := service8.NewSysCronService(iTaskManager)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	storageFactory := infrastructure.NewStorageFactory(bootstrap)
	storageAdapter, err := infrastructure.NewStorageAdapter(storageFactory)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	iFileRepository := data7.NewFileRepository(iDataBase)
	storageRepository := repository5.NewStorageRepo(iFileRepository)
	storageService := domain.NewStorageService(storageAdapter, storageRepository)
	applicationStorageService := application.NewStorageService(storageService)
	storage_restService := server.NewFileService(applicationStorageService)
	serve := server.NewServer(bootstrap, iToken, iDbOperationLogWrite, supportServer, sysCronService, storage_restService)
	mainApp := newApp(serve, eventManager)
	return mainApp, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
